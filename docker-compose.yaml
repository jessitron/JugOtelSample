services:

  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ordersdb
      POSTGRES_USER: orders
      POSTGRES_PASSWORD: orderspass
    ports:
      - "5432:5432"
    networks:
      - chat-network

  chat-service:
    build:
      context: ./services/chat_service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - OTEL_SERVICE_NAME=chat-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=${OTEL_EXPORTER_OTLP_PROTOCOL}
    env_file:
      - ./.env
    networks:
      - chat-network

  ecommerce-service:
    build:
      context: ./services/ecommerce_service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - OTEL_SERVICE_NAME=ecommerce-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=${OTEL_EXPORTER_OTLP_PROTOCOL}
    env_file:
      - ./.env
    depends_on:
      - postgres
      - otel-collector
    networks:
      - chat-network

  otel-collector:
    image: honeycombio/honeycomb-opentelemetry-collector:latest
    volumes:
      - ./otel-collector/otel-collector-config.yaml:/config.yaml
    environment:
      - HONEYCOMB_API_KEY=${HONEYCOMB_API_KEY}
    env_file:
      - ./.env
    networks:
      - chat-network
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver

networks:
  chat-network:
    driver: bridge

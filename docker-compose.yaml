services:

  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ordersdb
      POSTGRES_USER: orders
      POSTGRES_PASSWORD: orderspass
    ports:
      - "5432:5432"
    networks:
      - chat-network

  # chat-backend:
  #   build:
  #     context: ./services/chat_service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=dev
  #     - HONEYCOMB_API_KEY=${HONEYCOMB_API_KEY}
  #     - OTEL_SERVICE_NAME=chat-service
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=https://api.honeycomb.io:443
  #     - OTEL_EXPORTER_OTLP_HEADERS=x-honeycomb-team=${HONEYCOMB_API_KEY}
  #     - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
  #   env_file:
  #     - ./.env
  #   networks:
  #     - chat-network

  # chat-ui:
  #   build:
  #     context: ./chat-ui
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ./chat-ui/.env
  #   ports:
  #     - "4200:80"
  #   environment:
  #     - NG_APP_HONEYCOMB_API_KEY=${NG_APP_HONEYCOMB_API_KEY}
  #     - NG_APP_API_URL=${NG_APP_API_URL} 
  #     - NG_APP_CHAT_ENDPOINT=ws://chat-backend:8080/gs-guide-websocket
  #   depends_on:
  #     - chat-backend
  #   networks:
  #     - chat-network

  otel-collector:
    image: honeycombio/honeycomb-opentelemetry-collector:latest
#    build:
#      context: packages/client
#      dockerfile: Dockerfile
#      args:
#        - SYMBOLS_PATH=/symbols
#      target: collector-local
    volumes:
      - ./otel-collector/otel-collector-config.yaml:/config.yaml
    environment:
      HONEYCOMB_API_KEY: ${HONEYCOMB_API_KEY}
    env_file:
      - ./.env
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver

networks:
  chat-network:
    driver: bridge
